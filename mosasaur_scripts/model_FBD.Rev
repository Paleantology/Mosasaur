times <- v(110)

for (i in 1:(times.size()+1))  {
  speciation_rate[i] ~ dnExponential(1.471);
  moves.append(mvScale(speciation_rate[i], lambda=0.01, weight=5));
  moves.append(mvScale(speciation_rate[i], lambda=0.10, weight=3));
  moves.append(mvScale(speciation_rate[i], lambda=1.00, weight=1));
 # speciation_rate[i]
  turnover[i] ~ dnLnorm(ln(0.945), 0.6564);       # dnUnif(0.9, 1.05);
  moves.append(mvSlide(turnover[i], delta=0.01, weight=5));
  moves.append(mvSlide(turnover[i], delta=0.10, weight=3));
  moves.append(mvSlide(turnover[i], delta=1.00, weight=1));

  extinction_rate[i] := turnover[i]*speciation_rate[i];
  diversification[i] := speciation_rate[i] - extinction_rate[i];

  psi[i] ~ dnExponential(3.892);
  moves.append( mvScale(psi[i], lambda = 0.01) );
  moves.append( mvScale(psi[i], lambda = 0.1) );
  moves.append( mvScale(psi[i], lambda = 1) );
  i <- i+1
  }
# Proportional Taxon Sampling of Youngest Time Slice
rho <- 0;	# 'extant' sampling.

# Establish Basal Divergence Time
origin_time ~ dnUnif(110, 150);
moves.append(mvSlide(origin_time, delta=0.01, weight=5));
moves.append(mvSlide(origin_time, delta=0.10, weight=3));
moves.append(mvSlide(origin_time, delta=1.00, weight=1));

tree_dist = dnFBDP(lambda=speciation_rate, psi = psi, mu=extinction_rate, rho=rho, rootAge=origin_time, timeline = times, condition="sampling", taxa=taxa)
fbd_tree ~ dnConstrainedTopology(tree_dist)
#fbd_tree.setValue(mcc)
fbd_tree
# Specify moves on the tree and node times #
moves.append( mvNarrow(fbd_tree, weight=n_taxa) )
moves.append( mvFNPR(fbd_tree, weight=n_taxa/4.0) )
moves.append( mvNodeTimeSlideUniform(fbd_tree, weight=n_taxa) )
moves.append( mvSubtreeScale(fbd_tree, weight=n_taxa/5.0) )

fossils = fbd_tree.getFossils()
fossils
for(i in 1:fossils.size())
{
    t[i] := tmrca(fbd_tree, clade(fossils[i]))

    a_i = fossils[i].getMinAge()
    b_i = fossils[i].getMaxAge()

    F[i] ~ dnUniform(t[i] - b_i, t[i] - a_i)
    F[i].clamp( 0 )
}
# Add a move to sample the fossil times #
moves.append(mvFossilTimeSlideUniform(fbd_tree, origin_time, weight=5.0))
moves.append(mvCollapseExpandFossilBranch(fbd_tree, origin_time, weight=6.0))

# Add tree moves
moves.append(mvFNPR(fbd_tree, weight=15))
moves.append(mvNodeTimeSlideUniform(fbd_tree, weight=40))
moves.append(mvRootTimeSlideUniform(fbd_tree, origin_time, weight=5))

### Create deterministic nodes to monitor various tree statistics ###
# Monitor the nber of sampled ancestors in the FBD-tree #
n_samp_anc := fbd_tree.numSampledAncestors();

